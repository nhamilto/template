# from http://www.huyng.com/posts/sane-color-scheme-for-matplotlib/

patch.linewidth: 0.5
patch.facecolor: 348ABD  # blue
patch.edgecolor: EEEEEE
patch.antialiased: True


figure.facecolor: none
figure.edgecolor: 0.50

### FIGURE
# See http://matplotlib.org/api/figure_api.html#matplotlib.figure.Figure
figure.titlesize : large      # size of the figure title (Figure.suptitle())
figure.titleweight : normal   # weight of the figure title
figure.figsize   : 5, 3   # figure size in inches
figure.dpi       : 200      # figure dots per inch
#figure.facecolor : white   # figure facecolor; 0.75 is scalar gray
#figure.edgecolor : white   # figure edgecolor
#figure.autolayout : False  # When True, automatically adjust subplot
                            # parameters to make the plot fit the figure
#figure.max_open_warning : 20  # The maximum number of figures to open through
                               # the pyplot interface before emitting a warning.
                               # If less than one this feature is disabled.

# The figure subplot parameters.  All dimensions are a fraction of the
figure.subplot.left    : 0.10  # the left side of the subplots of the figure
figure.subplot.right   : 0.93    # the right side of the subplots of the figure
figure.subplot.bottom  : 0.08    # the bottom of the subplots of the figure
figure.subplot.top     : 0.92    # the top of the subplots of the figure
figure.subplot.wspace  : 0.1    # the amount of width reserved for blank space between subplots,
                                # expressed as a fraction of the average axis width
figure.subplot.hspace  : 0.1    # the amount of height reserved for white space between subplots,
                                # expressed as a fraction of the average axis height

### AXES
# default face and edge color, default tick sizes,
# default fontsizes for ticklabels, and so on.  See
# http://matplotlib.org/api/axes_api.html#module-matplotlib.axes
axes.facecolor      : white   # axes background color
axes.edgecolor      : black   # axes edge color
axes.linewidth      : 0.8     # edge linewidth
axes.grid           : False   # display grid or not
axes.titlesize      : large   # fontsize of the axes title
axes.titlepad       : 6.0     # pad between axes and title in points
axes.labelsize      : large  # fontsize of the x any y labels
axes.labelpad       : 4.0     # space between label and axis
axes.labelweight    : normal  # weight of the x and y labels
axes.labelcolor     : 212121
#axes.axisbelow      : 'line'  # draw axis gridlines and ticks below
                               # patches (True); above patches but below
                               # lines ('line'); or above all (False)

#axes.formatter.limits : -7, 7 # use scientific notation if log10
                               # of the axis range is smaller than the
                               # first or larger than the second
#axes.formatter.use_locale : False # When True, format tick labels
                                   # according to the user's locale.
                                   # For example, use ',' as a decimal
                                   # separator in the fr_FR locale.
axes.formatter.use_mathtext : True # When True, use mathtext for scientific
                                     # notation.
#axes.formatter.min_exponent: 0 # minimum exponent to format in scientific notation
#axes.formatter.useoffset      : True    # If True, the tick label formatter
                                         # will default to labeling ticks relative
                                         # to an offset when the data range is
                                         # small compared to the minimum absolute
                                         # value of the data.
#axes.formatter.offset_threshold : 4     # When useoffset is True, the offset
                                         # will be used when it can remove
                                         # at least this number of significant
                                         # digits from tick labels.

# axes.spines.left   : True   # display axis spines
# axes.spines.bottom : True
# axes.spines.top    : True
# axes.spines.right  : True


#axes.unicode_minus  : True    # use unicode for the minus symbol
                               # rather than hyphen.  See
                               # http://en.wikipedia.org/wiki/Plus_and_minus_signs#Character_codes
axes.prop_cycle: cycler('color', ['282D30', '0079C2', 'D9531E', '5D9732', '5E6A71', 'FFC423', '5DD2FF', 'FE6523'])
                   # 282D30 : charcoal
                   # 348ABD : blue
                   # D9531E : red
                   # 5D9732 : green
                   # 5E6A71 : gray
                   # FFC423 : yellow
                   # 5DD2FF : light blue
                   # FE6523 : light red

                      # color cycle for plot lines  as list of string
                      # colorspecs: single letter, long name, or web-style hex
axes.autolimit_mode : data # How to scale axes limits to the data.
                            # Use "data" to use data limits, plus some margin
                            # Use "round_number" move to the nearest "round" number
axes.xmargin        : .05  # x margin.  See `axes.Axes.margins`
axes.ymargin        : .05  # y margin See `axes.Axes.margins`

polaraxes.grid      : True    # display grid on polar axes
axes3d.grid         : True    # display grid on 3d axes

axes.axisbelow: True       # grid/ticks are below elements (e.g., lines, text)

xtick.color: 212121
xtick.direction: out
xtick.labelsize : medium

ytick.color: 212121
ytick.direction: out
ytick.labelsize : medium

grid.color: D1D5D8
grid.linestyle: -    # solid line



### LINES
# See http://matplotlib.org/api/artist_api.html#module-matplotlib.lines for more
# information on line properties.
lines.linewidth   : 1.5     # line width in points
lines.linestyle   : -       # solid line
lines.color       : C0      # has no affect on plot(); see axes.prop_cycle
lines.marker      : None    # the default marker
lines.markeredgewidth  : 1.5     # the line width around the marker symbol
lines.markersize  : 6            # markersize, in points
#lines.dash_joinstyle : miter        # miter|round|bevel
#lines.dash_capstyle : butt          # butt|round|projecting
#lines.solid_joinstyle : miter       # miter|round|bevel
#lines.solid_capstyle : projecting   # butt|round|projecting
#lines.antialiased : True         # render lines in antialiased (no jaggies)

# The three standard dash patterns.  These are scaled by the linewidth.
lines.dashed_pattern : 2.8, 1.2
lines.dashdot_pattern : 4.8, 1.2, 0.8, 1.2
lines.dotted_pattern : 1.1, 1.1
lines.scale_dashes : True

### IMAGES
image.aspect : equal             # equal | auto | a number
image.interpolation  : nearest   # see help(imshow) for options
image.cmap   : viridis           # A colormap name, gray etc...
image.lut    : 256               # the size of the colormap lookup table
image.origin : upper             # lower | upper
image.resample  : True
image.composite_image : True     # When True, all the images on a set of axes are
                                  # combined into a single composite image before
                                  # saving a figure as a vector graphics file,
                                  # such as a PDF.

### CONTOUR PLOTS
contour.negative_linestyle : dashed # string or on-off ink sequence
contour.corner_mask        : True   # True | False | legacy

### ERRORBAR PLOTS
errorbar.capsize : 6             # length of end cap on error bars in pixels

### HISTOGRAM PLOTS
hist.bins : auto                   # The default number of histogram bins.
                                  # If Numpy 1.11 or later is
                                  # installed, may also be `auto`

### SCATTER PLOTS
scatter.marker : o               # The default marker type for scatter plots.

### FONT
#
# font properties used by text.Text.  See
# http://matplotlib.org/api/font_manager_api.html for more
# information on font properties.  The 6 font properties used for font
# matching are given below with their default values.
#
# The font.family property has five values: 'serif' (e.g., Times),
# 'sans-serif' (e.g., Helvetica), 'cursive' (e.g., Zapf-Chancery),
# 'fantasy' (e.g., Western), and 'monospace' (e.g., Courier).  Each of
# these font families has a default list of font names in decreasing
# order of priority associated with them.  When text.usetex is False,
# font.family may also be one or more concrete font names.
#
# The font.style property has three values: normal (or roman), italic
# or oblique.  The oblique style will be used for italic, if it is not
# present.
#
# The font.variant property has two values: normal or small-caps.  For
# TrueType fonts, which are scalable fonts, small-caps is equivalent
# to using a font size of 'smaller', or about 83%% of the current font
# size.
#
# The font.weight property has effectively 13 values: normal, bold,
# bolder, lighter, 100, 200, 300, ..., 900.  Normal is the same as
# 400, and bold is 700.  bolder and lighter are relative values with
# respect to the current weight.
#
# The font.stretch property has 11 values: ultra-condensed,
# extra-condensed, condensed, semi-condensed, normal, semi-expanded,
# expanded, extra-expanded, ultra-expanded, wider, and narrower.  This
# property is not currently implemented.
#
# The font.size property is the default font size for text, given in pts.
# 10 pt is the standard value.

font.family         : sans-serif
font.style          : normal
font.variant        : normal
font.weight         : normal
font.stretch        : normal

# note that font.size controls default text sizes.  To configure
# special text sizes tick labels, axes, labels, title, etc, see the rc
# settings for axes and ticks. Special text sizes can be defined
# relative to font.size, using the following values: xx-small, x-small,
# small, medium, large, x-large, xx-large, larger, or smaller

#font.size           : 10.0
#font.serif          : DejaVu Serif, Bitstream Vera Serif, New Century Schoolbook, Century Schoolbook L, Utopia, ITC Bookman, Bookman, Nimbus Roman No9 L, Times New Roman, Times, Palatino, Charter, serif
#font.sans-serif     : DejaVu Sans, Bitstream Vera Sans, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif
#font.cursive        : Apple Chancery, Textile, Zapf Chancery, Sand, Script MT, Felipa, cursive
#font.fantasy        : Comic Sans MS, Chicago, Charcoal, Impact, Western, Humor Sans, xkcd, fantasy
#font.monospace      : DejaVu Sans Mono, Bitstream Vera Sans Mono, Andale Mono, Nimbus Mono L, Courier New, Courier, Fixed, Terminal, monospace

### TEXT
# text properties used by text.Text.  See
# http://matplotlib.org/api/artist_api.html#module-matplotlib.text for more
# information on text properties

text.color          : black

### LaTeX customizations. See http://wiki.scipy.org/Cookbook/Matplotlib/UsingTex
text.usetex         : True  # use latex for all text handling. The following fonts
                              # are supported through the usual rc parameter settings:
                              # new century schoolbook, bookman, times, palatino,
                              # zapf chancery, charter, serif, sans-serif, helvetica,
                              # avant garde, courier, monospace, computer modern roman,
                              # computer modern sans serif, computer modern typewriter
                              # If another font is desired which can loaded using the
                              # LaTeX \usepackage command, please inquire at the
                              # matplotlib mailing list
#text.latex.unicode : False # use "ucs" and "inputenc" LaTeX packages for handling
                            # unicode strings.
#text.latex.preamble :  # IMPROPER USE OF THIS FEATURE WILL LEAD TO LATEX FAILURES
                            # AND IS THEREFORE UNSUPPORTED. PLEASE DO NOT ASK FOR HELP
                            # IF THIS FEATURE DOES NOT DO WHAT YOU EXPECT IT TO.
                            # preamble is a comma separated list of LaTeX statements
                            # that are included in the LaTeX document preamble.
                            # An example:
                            # text.latex.preamble : \usepackage{bm},\usepackage{euler}
                            # The following packages are always loaded with usetex, so
                            # beware of package collisions: color, geometry, graphicx,
                            # type1cm, textcomp. Adobe Postscript (PSSNFS) font packages
                            # may also be loaded, depending on your font settings
#text.hinting : auto   # May be one of the following:
                       #   'none': Perform no hinting
                       #   'auto': Use FreeType's autohinter
                       #   'native': Use the hinting information in the
                       #             font file, if available, and if your
                       #             FreeType library supports it
                       #   'either': Use the native hinting information,
                       #             or the autohinter if none is available.
                       # For backward compatibility, this value may also be
                       # True === 'auto' or False === 'none'.
#text.hinting_factor : 8 # Specifies the amount of softness for hinting in the
                         # horizontal direction.  A value of 1 will hint to full
                         # pixels.  A value of 2 will hint to half pixels etc.

text.antialiased : True # If True (default), the text will be antialiased.
                         # This only affects the Agg backend.

# The following settings allow you to select the fonts in math mode.
# They map from a TeX font name to a fontconfig font pattern.
# These settings are only used if mathtext.fontset is 'custom'.
# Note that this "custom" mode is unsupported and may go away in the
# future.

mathtext.cal : cursive
mathtext.rm  : serif
mathtext.tt  : monospace
mathtext.it  : serif:italic
mathtext.bf  : serif:bold
mathtext.sf  : sans
mathtext.fontset : dejavusans # Should be 'dejavusans' (default),
                               # 'dejavuserif', 'cm' (Computer Modern), 'stix',
                               # 'stixsans' or 'custom'
mathtext.fallback_to_cm : True  # When True, use symbols from the Computer Modern
                                 # fonts when a symbol can not be found in one of
                                 # the custom math fonts.

mathtext.default : it # The default font to use for math.
                       # Can be any of the LaTeX font names, including
                       # the special name "regular" for the same font
                       # used in regular text.

### DATES
# These control the default format strings used in AutoDateFormatter.
# Any valid format datetime format string can be used (see the python
# `datetime` for details).  For example using '%%x' will use the locale date representation
# '%%X' will use the locale time representation and '%%c' will use the full locale datetime
# representation.
# These values map to the scales:
#    {'year': 365, 'month': 30, 'day': 1, 'hour': 1/24, 'minute': 1 / (24 * 60)}

date.autoformatter.year     : %Y
date.autoformatter.month    : %Y-%m
date.autoformatter.day      : %Y-%m-%d
date.autoformatter.hour     : %m-%d %H
date.autoformatter.minute   : %d %H:%M
date.autoformatter.second   : %H:%M:%S
date.autoformatter.microsecond   : %M:%S.%f

### Legend
legend.loc           : best
legend.frameon       : False     # if True, draw the legend on a background patch
legend.framealpha    : 0.5      # legend patch transparency
legend.facecolor     : none  # inherit from axes.facecolor; or color spec
legend.edgecolor     : none      # background patch boundary color
legend.fancybox      : True     # if True, use a rounded box for the
                                 # legend background, else a rectangle
legend.shadow        : False    # if True, give background a shadow effect
legend.numpoints     : 1        # the number of marker points in the legend line
legend.scatterpoints : 1        # number of scatter points
legend.markerscale   : 1.0      # the relative size of legend markers vs. original
legend.fontsize      : large

# Dimensions as fraction of fontsize:
#legend.borderpad     : 0.4      # border whitespace
#legend.labelspacing  : 0.5      # the vertical space between the legend entries
#legend.handlelength  : 2.0      # the length of the legend lines
#legend.handleheight  : 0.7      # the height of the legend handle
#legend.handletextpad : 0.8      # the space between the legend line and legend text
#legend.borderaxespad : 0.5      # the border between the axes and legend edge
#legend.columnspacing : 2.0      # column separation


### SAVING FIGURES
path.simplify : True   # When True, simplify paths by removing "invisible"
                        # points to reduce file size and increase rendering
                        # speed
path.simplify_threshold : 0.1  # The threshold of similarity below which
                                # vertices will be removed in the simplification
                                # process
path.snap : True # When True, rectilinear axis-aligned paths will be snapped to
                  # the nearest pixel when certain criteria are met.  When False,
                  # paths will never be snapped.
path.sketch : None # May be none, or a 3-tuple of the form (scale, length,
                    # randomness).
                    # *scale* is the amplitude of the wiggle
                    # perpendicular to the line (in pixels).  *length*
                    # is the length of the wiggle along the line (in
                    # pixels).  *randomness* is the factor by which
                    # the length is randomly scaled.

# the default savefig params can be different from the display params
# e.g., you may want a higher resolution, or to make the figure
# background white
savefig.dpi         : figure   # figure dots per inch or 'figure'
savefig.facecolor   : none    # figure facecolor when saving
savefig.edgecolor   : none    # figure edgecolor when saving
savefig.format      : png      # png, ps, pdf, svg
savefig.bbox        : tight # 'tight' or 'standard'.
                                # 'tight' is incompatible with pipe-based animation
                                # backends but will work with temporary file based ones:
                                # e.g. setting animation.writer to ffmpeg will not work,
                                # use ffmpeg_file instead
savefig.pad_inches  : 0.05      # Padding to be used when bbox is set to 'tight'
savefig.jpeg_quality: 95       # when a jpeg is saved, the default quality parameter.
#savefig.directory   : ~        # default directory in savefig dialog box,
                                # leave empty to always use current working directory
savefig.transparent : True    # setting that controls whether figures are saved with a
                                # transparent background by default

# pdf backend params
pdf.compression   : 6 # integer from 0 to 9
                       # 0 disables compression (good for debugging)
pdf.fonttype       : 42         # Output Type 3 (Type3) or Type 42 (TrueType)

###ANIMATION settings
#animation.html : 'none'           # How to display the animation as HTML in
                                   # the IPython notebook. 'html5' uses
                                   # HTML5 video tag.
#animation.writer : ffmpeg         # MovieWriter 'backend' to use
#animation.codec : h264            # Codec to use for writing movie
#animation.bitrate: -1             # Controls size/quality tradeoff for movie.
                                   # -1 implies let utility auto-determine
#animation.frame_format: 'png'     # Controls frame format used by temp files
#animation.html_args: ''           # Additional arguments to pass to html writer
#animation.ffmpeg_path: 'ffmpeg'   # Path to ffmpeg binary. Without full path
                                   # $PATH is searched
#animation.ffmpeg_args: ''         # Additional arguments to pass to ffmpeg
#animation.avconv_path: 'avconv'   # Path to avconv binary. Without full path
                                   # $PATH is searched
#animation.avconv_args: ''         # Additional arguments to pass to avconv
#animation.mencoder_path: 'mencoder'
                                   # Path to mencoder binary. Without full path
                                   # $PATH is searched
#animation.mencoder_args: ''       # Additional arguments to pass to mencoder
#animation.convert_path: 'convert' # Path to ImageMagick's convert binary.
                                   # On Windows use the full path since convert
                                   # is also the name of a system tool.
